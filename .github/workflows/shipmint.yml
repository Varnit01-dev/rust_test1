Act as an expert in Solana development and DevOps. Your task is to generate a complete GitHub Actions workflow YAML file for a Solana project built with the Anchor framework.

Here is the information about the user's repository:
- **Repository Name:** {{ .RepoFullName }}
- **Detected Framework:** {{ .Framework }}
- **Network:** {{ .Network }}
- **Files in Root Directory:**
  {{ range .Files }}- {{ . }}
  {{ end }}

**IMPORTANT: Generate ONLY the raw YAML content. Do NOT encode, encrypt, or modify the output in any way. Output the YAML file exactly as it should appear in .github/workflows/ directory.**

**Instructions for the YAML file:**

1. **Name:** The workflow should be named "Anchor Build, Test and Deploy".

2. **Triggers:** The workflow must trigger on `push` and `pull_request` events to the `main` branch.

3. **Environment Variables:** Set the following environment variables:
   - `SOLANA_VERSION`: "1.18.4"
   - `ANCHOR_VERSION`: "0.30.1"
   - `NODE_VERSION`: "18"
   - `NETWORK`: "{{ .Network }}"

4. **Jobs:** The workflow must contain two jobs:

   **Job 1: `build-and-test`** (runs on `ubuntu-latest`)
   - **Checkout Code:** Use `actions/checkout@v4`.
   - **Setup Node.js:** Use `actions/setup-node@v4` with Node version from env.
   - **Cache Dependencies:** Cache both npm and Cargo dependencies for faster builds.
   - **Install Solana CLI:** Use the official Solana install script with version from env.
   - **Add Solana to PATH:** Ensure the Solana binary is available in the GitHub Actions path.
   - **Install Anchor:** Use `cargo` to install `avm` (Anchor Version Manager), then use `avm` to install and select the version from env.
   - **Install Dependencies:** Run `npm install` to install JavaScript dependencies.
   - **Build Program:** Run the `anchor build` command to compile the on-chain program.
   - **Run Tests:** Run the `anchor test` command to execute the test suite.
   - **Upload Build Artifacts:** Upload the compiled program files for deployment.

   **Job 2: `deploy-devnet`** (runs on `ubuntu-latest`, depends on `build-and-test`)
   - **Condition:** Only run on push to main branch.
   - **Checkout Code:** Use `actions/checkout@v4`.
   - **Download Build Artifacts:** Download the compiled program from the previous job.
   - **Setup Environment:** Restore Solana CLI and Anchor setup.
   - **Configure Solana for Devnet:** Set Solana config to use devnet cluster.
   - **Create Deploy Keypair:** IMPORTANT - Use this exact command: `echo "${{ secrets.DEPLOY_KEYPAIR }}" | base64 -d > deploy-keypair.json` (Do NOT encode this line)
   - **Airdrop Devnet SOL:** Request devnet SOL for deployment fees.
   - **Deploy to Devnet:** Run `anchor deploy` with devnet configuration.
   - **Verify Deployment:** Check if program deployed successfully.
   - **Cleanup:** Remove sensitive keypair files with `rm -f deploy-keypair.json`.
   - **Post Deployment Info:** Log deployment details and program ID.

5. **Required Secrets:**
   - `DEPLOY_KEYPAIR`: Base64 encoded deployment keypair JSON
   - `ANCHOR_PROVIDER_URL`: Devnet RPC URL (optional, defaults to public devnet)

6. **Security Considerations:**
   - Never expose private keys in logs
   - Clean up keypair files after deployment
   - Use proper secret management
   - Add deployment verification steps

**CRITICAL INSTRUCTIONS:**
- Output ONLY the YAML content
- Do NOT add markdown code blocks (no ```yaml or ```)
- Do NOT base64 encode the entire file
- Do NOT add explanations before or after the YAML
- The GitHub secret DEPLOY_KEYPAIR should contain the base64 encoded keypair, but the YAML file itself should be plain text
- Start your response directly with "name: Anchor Build, Test and Deploy"
