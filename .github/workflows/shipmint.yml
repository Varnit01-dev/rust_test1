name: Anchor Build, Test and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  SOLANA_VERSION: "1.18.4"
  ANCHOR_VERSION: "0.30.1"
  NODE_VERSION: "18"
  NETWORK: "{{ .Network }}" # This will be 'devnet', 'mainnet-beta', etc., passed from the backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node- # Restore key for partial matches

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            ~/.rustup
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo- # Restore key for partial matches

      - name: Install Solana CLI
        run: |
          # Install Solana CLI using the official script and specified version
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
          # Add Solana binaries to the GitHub Actions PATH
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          
      - name: Install Anchor
        run: |
          # Use rustup to install a specific nightly version required by avm
          # This helps avoid compatibility issues with the default toolchain
          rustup toolchain install nightly --component clippy
          rustup default nightly

          # Install avm from the specified tag
          cargo install avm --git https://github.com/project-serum/anchor --tag v0.30.1 --locked --force

          # Add avm to PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

          # Install and use the specified Anchor version via avm
          avm install ${{ env.ANCHOR_VERSION }}
          avm use ${{ env.ANCHOR_VERSION }}
      - name: Install JavaScript Dependencies
        run: npm install

      - name: Build Program
        run: anchor build

      - name: Run Tests
        run: anchor test

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: solana-program-artifacts
          path: target/deploy/ # Path to compiled program files

  deploy-devnet:
    runs-on: ubuntu-latest
    needs: build-and-test # This job depends on 'build-and-test' completing successfully
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main branch

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: solana-program-artifacts
          path: target/deploy

      - name: Setup Node.js (for Anchor CLI)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Solana CLI
        run: |
          # Re-install Solana CLI as environments are isolated between jobs
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Install Anchor
        run: |
          # Re-install Anchor as environments are isolated between jobs
          cargo install avm --locked --force
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          avm install ${{ env.ANCHOR_VERSION }}
          avm use ${{ env.ANCHOR_VERSION }}

      - name: Configure Solana for Devnet
        run: |
          # Set the Solana cluster URL using the NETWORK environment variable
          solana config set --url ${{ env.NETWORK }}
          # If secrets.ANCHOR_PROVIDER_URL is provided, it can be used to override
          # the RPC URL for Anchor, e.g., in anchor deploy command.
          # For now, anchor deploy will use the URL set by solana config.

      - name: Create Deploy Keypair
        env:
          # Access the DEPLOY_KEYPAIR secret securely
          DEPLOY_KEYPAIR: ${{ secrets.DEPLOY_KEYPAIR }}
        run: |
          # Decode the Base64 encoded keypair and save it to a file
          echo "$DEPLOY_KEYPAIR" | base64 -d > deploy-keypair.json
          # Set restrictive permissions for the keypair file
          chmod 600 deploy-keypair.json
          # Configure Solana CLI to use this keypair for subsequent commands
          solana config set --keypair deploy-keypair.json
          # Log the public key for verification (optional, but useful for debugging)
          solana-keygen pubkey deploy-keypair.json

      - name: Airdrop Devnet SOL
        run: |
          MAX_RETRIES=10
          RETRY_DELAY=5
          AIRDROP_AMOUNT=2
          echo "Requesting airdrop of ${AIRDROP_AMOUNT} SOL to $(solana-keygen pubkey deploy-keypair.json)..."
          for i in $(seq 1 $MAX_RETRIES); do
            solana airdrop ${AIRDROP_AMOUNT} --url https://api.${{ env.NETWORK }}.solana.com
            if [ $? -eq 0 ]; then
              echo "Airdrop successful. Checking balance..."
              BALANCE=$(solana balance --url https://api.${{ env.NETWORK }}.solana.com | grep -oE '[0-9]+\.[0-9]+' | head -n 1)
              echo "Current balance: $BALANCE SOL"
              if [ $(echo "$BALANCE > 0.5" | bc -l) -eq 1 ]; then
                echo "Balance is sufficient. Proceeding."
                break
              fi
            fi
            echo "Airdrop or balance check failed, retrying in ${RETRY_DELAY} seconds..."
            sleep ${RETRY_DELAY}
          done
          if [ $i -eq $MAX_RETRIES ]; then
            echo "Airdrop failed after $MAX_RETRIES retries. Continuing anyway, but deploy may fail."
          fi
        env:
          ANCHOR_PROVIDER_URL: ${{ secrets.ANCHOR_PROVIDER_URL || format('https://api.{0}.solana.com', env.NETWORK) }}

      - name: Deploy to Devnet
        id: deploy
        run: |
          DEPLOY_OUTPUT=$(anchor deploy 2>&1)
          echo "$DEPLOY_OUTPUT"
          # Find the program ID in the output and save it to the workflow environment
          PROGRAM_ID=$(echo "$DEPLOY_OUTPUT" | grep 'Program Id:' | awk '{print $3}')
          if [ -z "$PROGRAM_ID" ]; then
            echo "::error::Could not extract Program ID from deploy output. Check logs."
            exit 1
          fi
          echo "DEPLOYED_PROGRAM_ID=$PROGRAM_ID" >> $GITHUB_ENV
        env:
          ANCHOR_PROVIDER_URL: ${{ secrets.ANCHOR_PROVIDER_URL || format('https://api.{0}.solana.com', env.NETWORK) }}

      - name: Verify Deployment
        if: success() && env.DEPLOYED_PROGRAM_ID != ''
        run: |
          echo "Verifying deployment of program ID: ${{ env.DEPLOYED_PROGRAM_ID }}"
          solana program show --cluster ${{ env.NETWORK }} ${{ env.DEPLOYED_PROGRAM_ID }}
        env:
          ANCHOR_PROVIDER_URL: ${{ secrets.ANCHOR_PROVIDER_URL || format('https://api.{0}.solana.com', env.NETWORK) }}

      - name: Cleanup Deploy Keypair
        if: always()
        run: rm -f deploy-keypair.json

      - name: Post Deployment Information
        if: success() && env.DEPLOYED_PROGRAM_ID != ''
        run: |
          echo "Deployment successful to Devnet!"
          echo "Program ID: ${{ env.DEPLOYED_PROGRAM_ID }}"
          echo "View on Solscan: https://solscan.io/account/${{ env.DEPLOYED_PROGRAM_ID }}?cluster=${{ env.NETWORK }}"
