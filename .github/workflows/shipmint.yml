name: Anchor Build, Test and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SOLANA_VERSION: "1.18.4"
  ANCHOR_VERSION: "0.30.1"
  NODE_VERSION: "18"
  NETWORK: "devnet"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/
          ~/.cargo/git/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

    - name: Install Anchor
      run: |
        cargo install --git https://github.com/project-serum/anchor avm --locked --features cli
        avm install ${{ env.ANCHOR_VERSION }}
        avm use ${{ env.ANCHOR_VERSION }}

    - name: Install JavaScript dependencies
      run: npm install

    - name: Build Anchor Program
      run: anchor build

    - name: Run Anchor Tests
      run: anchor test

    - name: Upload Program Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: program-artifacts
        path: |
          target/idl/*.json
          target/deploy/*.so
          target/deploy/*.json

  deploy-devnet:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      # Use provided RPC URL or default devnet
      ANCHOR_PROVIDER_URL: ${{ secrets.ANCHOR_PROVIDER_URL || 'https://api.devnet.solana.com' }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Program Artifacts
      uses: actions/download-artifact@v4
      with:
        name: program-artifacts
        path: target/

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

    - name: Install Anchor
      run: |
        cargo install --git https://github.com/project-serum/anchor avm --locked --features cli
        avm install ${{ env.ANCHOR_VERSION }}
        avm use ${{ env.ANCHOR_VERSION }}

    - name: Configure Solana for Devnet
      run: solana config set --url ${{ env.ANCHOR_PROVIDER_URL }}

    - name: Create Deploy Keypair
      run: echo "${{ secrets.DEPLOY_KEYPAIR }}" | base64 -d > deploy-keypair.json

    - name: Airdrop Devnet SOL
      run: solana airdrop 5 -k deploy-keypair.json --url ${{ env.ANCHOR_PROVIDER_URL }}
      continue-on-error: true

    - name: Deploy to Devnet
      run: anchor deploy --wallet deploy-keypair.json --provider.cluster devnet --skip-build

    - name: Verify Deployment
      run: |
        PROGRAM_ID=$(anchor keys list | grep -i "Program ID:" | awk '{print $NF}' | head -n 1)
        if [ -z "$PROGRAM_ID" ]; then
            echo "Error: Program ID not found after deployment."
            exit 1
        fi
        echo "Successfully deployed Program ID: $PROGRAM_ID"
        solana program show "$PROGRAM_ID" --cluster devnet || true

    - name: Cleanup Keypair
      run: rm -f deploy-keypair.json