name: Anchor Build, Test and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  SOLANA_VERSION: "1.18.4"
  ANCHOR_VERSION: "0.30.1"
  NODE_VERSION: "18"
  NETWORK: "devnet"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Install Anchor
        run: |
          cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
          avm install ${{ env.ANCHOR_VERSION }}
          avm use ${{ env.ANCHOR_VERSION }}
          echo "$HOME/.avm/bin" >> $GITHUB_PATH

      - name: Install JavaScript dependencies
        run: npm install

      - name: Build program
        run: anchor build

      - name: Run tests
        run: anchor test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: program-artifacts
          path: target/deploy

  deploy-devnet:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: program-artifacts
          path: target/deploy

      - name: Setup Node.js (for Anchor setup script)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Setup Anchor
        run: |
          cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
          avm install ${{ env.ANCHOR_VERSION }}
          avm use ${{ env.ANCHOR_VERSION }}
          echo "$HOME/.avm/bin" >> $GITHUB_PATH

      - name: Configure Solana for Devnet
        run: |
          SOLANA_RPC_URL="${{ secrets.ANCHOR_PROVIDER_URL }}"
          if [ -z "$SOLANA_RPC_URL" ]; then
            SOLANA_RPC_URL="https://api.${{ env.NETWORK }}.solana.com"
          fi
          solana config set --url "$SOLANA_RPC_URL"

      - name: Create deploy keypair
        run: echo "${{ secrets.DEPLOY_KEYPAIR }}" | base64 -d > deploy-keypair.json
        shell: bash

      - name: Airdrop Devnet SOL for deployment fees
        run: solana airdrop 5 -k deploy-keypair.json --url https://api.${{ env.NETWORK }}.solana.com
        continue-on-error: true # Airdrops can fail if faucet is empty, but often succeed on retry by Anchor.

      - name: Deploy to Devnet
        run: anchor deploy --provider.cluster ${{ env.NETWORK }} --provider.wallet deploy-keypair.json
        env:
          ANCHOR_WALLET: deploy-keypair.json # Set this env var for anchor to pick up the wallet
          ANCHOR_PROVIDER_URL: ${{ secrets.ANCHOR_PROVIDER_URL || format('https://api.{0}.solana.com', env.NETWORK) }}

      - name: Verify Deployment (check for program ID in output)
        run: |
          echo "Deployment initiated. Check logs above for program ID."
          # A more robust verification would involve parsing output or checking explorer.
          # For now, relying on successful anchor deploy command.

      - name: Cleanup sensitive keypair file
        if: always()
        run: rm -f deploy-keypair.json

      - name: Post Deployment Info
        run: |
          echo "Program deployment to Devnet completed."
          echo "Remember to update your client-side code with the new program ID if it changed."